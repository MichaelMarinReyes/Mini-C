// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/


 
  let memoria = new Map();
  let salida = "";
  let errorSalida = "";
  let errores = [];
 
  function setVariable(id, valor, tipo, linea, columna) {
      memoria.set(id, {value: valor, type: tipo, location: {line: linea, col: columna}})
  }
  
  function getVariable(id) {
      let registro = memoria.get(id)
      if (!registro) {
          añadirError("Variable " + id + " no está definida", location())
          return null
      }
      return registro.value
  }
  
  function salidaTexto(linea) {
      if (salida !== "") {
          salida += "\n";
      }
      salida += linea;
  }
  
    function addError(errorMessage, location) {
        if (errorSalida !== "") {
            errorSalida += "\n";
        }
        let startCol = location.start.column
        let endCol = location.end.column
        let line = location.start.line
        errorSalida += "Error en linea " + line + ":" + startCol + "-" + endCol + ". " +errorMessage;
    }

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { inicio: peg$parseinicio };
  var peg$startRuleFunction = peg$parseinicio;

  var peg$c0 = "nombre_proyecto";
  var peg$c1 = ":";
  var peg$c2 = "\"";
  var peg$c3 = "main";
  var peg$c4 = ".cmm";
  var peg$c5 = "modulo";
  var peg$c6 = "\n";
  var peg$c7 = "archivo";
  var peg$c8 = "#";
  var peg$c9 = "void";
  var peg$c10 = "(";
  var peg$c11 = ")";
  var peg$c12 = "{";
  var peg$c13 = "}";
  var peg$c14 = "=";
  var peg$c15 = ";";
  var peg$c16 = "return";
  var peg$c17 = "int";
  var peg$c18 = "float";
  var peg$c19 = "string";
  var peg$c20 = "char";
  var peg$c21 = "bool";
  var peg$c22 = "^";
  var peg$c23 = "-";
  var peg$c24 = "struct";
  var peg$c25 = "print";
  var peg$c26 = "$";
  var peg$c27 = "*";
  var peg$c28 = ",";
  var peg$c29 = "if";
  var peg$c30 = "else";
  var peg$c31 = ">=";
  var peg$c32 = "<=";
  var peg$c33 = "==";
  var peg$c34 = "!=";
  var peg$c35 = "||";
  var peg$c36 = "&&";
  var peg$c37 = "!";
  var peg$c38 = "for";
  var peg$c39 = "i";
  var peg$c40 = "i++";
  var peg$c41 = "i--";
  var peg$c42 = ".";
  var peg$c43 = "'";
  var peg$c44 = "true";
  var peg$c45 = "false";

  var peg$r0 = /^[^\n]/;
  var peg$r1 = /^[+\-]/;
  var peg$r2 = /^[*\/]/;
  var peg$r3 = /^[^"$"]/;
  var peg$r4 = /^[<>]/;
  var peg$r5 = /^[0-9]/;
  var peg$r6 = /^[^"\n\r"]/;
  var peg$r7 = /^[a-zA-Z0-9]/;
  var peg$r8 = /^[a-zA-Z_]/;
  var peg$r9 = /^[a-zA-Z0-9_]/;
  var peg$r10 = /^[ \t\n\r]/;

  var peg$e0 = peg$otherExpectation("inicio");
  var peg$e1 = peg$otherExpectation("lenguajes");
  var peg$e2 = peg$otherExpectation("yml");
  var peg$e3 = peg$otherExpectation("nombre proyecto");
  var peg$e4 = peg$literalExpectation("nombre_proyecto", false);
  var peg$e5 = peg$literalExpectation(":", false);
  var peg$e6 = peg$literalExpectation("\"", false);
  var peg$e7 = peg$otherExpectation("main");
  var peg$e8 = peg$literalExpectation("main", false);
  var peg$e9 = peg$literalExpectation(".cmm", false);
  var peg$e10 = peg$otherExpectation("modulos");
  var peg$e11 = peg$literalExpectation("modulo", false);
  var peg$e12 = peg$literalExpectation("\n", false);
  var peg$e13 = peg$otherExpectation("lista");
  var peg$e14 = peg$literalExpectation("archivo", false);
  var peg$e15 = peg$otherExpectation("comentario");
  var peg$e16 = peg$literalExpectation("#", false);
  var peg$e17 = peg$classExpectation(["\n"], true, false);
  var peg$e18 = peg$anyExpectation();
  var peg$e19 = peg$otherExpectation("Bloque Mini C");
  var peg$e20 = peg$literalExpectation("void", false);
  var peg$e21 = peg$literalExpectation("(", false);
  var peg$e22 = peg$literalExpectation(")", false);
  var peg$e23 = peg$literalExpectation("{", false);
  var peg$e24 = peg$literalExpectation("}", false);
  var peg$e25 = peg$otherExpectation("declaraci\xF3n de variables");
  var peg$e26 = peg$literalExpectation("=", false);
  var peg$e27 = peg$literalExpectation(";", false);
  var peg$e28 = peg$otherExpectation("asignaci\xF3n");
  var peg$e29 = peg$otherExpectation("funci\xF3n");
  var peg$e30 = peg$literalExpectation("return", false);
  var peg$e31 = peg$otherExpectation("tipo");
  var peg$e32 = peg$literalExpectation("int", false);
  var peg$e33 = peg$literalExpectation("float", false);
  var peg$e34 = peg$literalExpectation("string", false);
  var peg$e35 = peg$literalExpectation("char", false);
  var peg$e36 = peg$literalExpectation("bool", false);
  var peg$e37 = peg$otherExpectation("expresi\xF3n");
  var peg$e38 = peg$classExpectation(["+", "-"], false, false);
  var peg$e39 = peg$classExpectation(["*", "/"], false, false);
  var peg$e40 = peg$literalExpectation("^", false);
  var peg$e41 = peg$literalExpectation("-", false);
  var peg$e42 = peg$otherExpectation("contenido del mini C");
  var peg$e43 = peg$otherExpectation("structs");
  var peg$e44 = peg$literalExpectation("struct", false);
  var peg$e45 = peg$otherExpectation("print");
  var peg$e46 = peg$literalExpectation("print", false);
  var peg$e47 = peg$classExpectation(["\"", "$", "\""], true, false);
  var peg$e48 = peg$literalExpectation("$", false);
  var peg$e49 = peg$otherExpectation("cuerpo de una funci\xF3n");
  var peg$e50 = peg$otherExpectation("variables de struct");
  var peg$e51 = peg$otherExpectation("parametros");
  var peg$e52 = peg$literalExpectation("*", false);
  var peg$e53 = peg$literalExpectation(",", false);
  var peg$e54 = peg$otherExpectation("condicional if");
  var peg$e55 = peg$literalExpectation("if", false);
  var peg$e56 = peg$literalExpectation("else", false);
  var peg$e57 = peg$otherExpectation("condicion");
  var peg$e58 = peg$classExpectation(["<", ">"], false, false);
  var peg$e59 = peg$literalExpectation(">=", false);
  var peg$e60 = peg$literalExpectation("<=", false);
  var peg$e61 = peg$literalExpectation("==", false);
  var peg$e62 = peg$literalExpectation("!=", false);
  var peg$e63 = peg$literalExpectation("||", false);
  var peg$e64 = peg$literalExpectation("&&", false);
  var peg$e65 = peg$literalExpectation("!", false);
  var peg$e66 = peg$otherExpectation("Ciclo For");
  var peg$e67 = peg$literalExpectation("for", false);
  var peg$e68 = peg$literalExpectation("i", false);
  var peg$e69 = peg$literalExpectation("i++", false);
  var peg$e70 = peg$literalExpectation("i--", false);
  var peg$e71 = peg$otherExpectation("n\xFAmero");
  var peg$e72 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e73 = peg$literalExpectation(".", false);
  var peg$e74 = peg$otherExpectation("string");
  var peg$e75 = peg$classExpectation(["\"", "\n", "\r", "\""], true, false);
  var peg$e76 = peg$otherExpectation("char");
  var peg$e77 = peg$literalExpectation("'", false);
  var peg$e78 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e79 = peg$otherExpectation("booleano");
  var peg$e80 = peg$literalExpectation("true", false);
  var peg$e81 = peg$literalExpectation("false", false);
  var peg$e82 = peg$otherExpectation("variable");
  var peg$e83 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e84 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e85 = peg$otherExpectation("whitespace");
  var peg$e86 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function() { return {salida: salida, errores: errorSalida, tablaSimbolos: memoria}; };
  var peg$f1 = function(yaml) { return yaml; };
  var peg$f2 = function(miniC) { return miniC; };
  var peg$f3 = function(np, main, mods) { return {nombre: np, main: main, modulos: mods}; };
  var peg$f4 = function(nombre) { return nombre; };
  var peg$f5 = function(archivo) { return archivo + ".cmm"; };
  var peg$f6 = function(archivos) { return archivos.flat(); };
  var peg$f7 = function(archivo) { return [archivo + ".cmm"]; };
  var peg$f8 = function() { return null; };
  var peg$f9 = function(sentencia) { return sentencia; };
  var peg$f10 = function(sentencia) { return sentencia; };
  var peg$f11 = function(sentencia) { return sentencia; };
  var peg$f12 = function(sentencia) { return sentencia; };
  var peg$f13 = function(sentencia) { return sentencia; };
  var peg$f14 = function(sentencia) { return sentencia; };
  var peg$f15 = function(tipo, variable, valor) {
    setVariable(variable, valor, tipo.tipo, location().start.line, location().start.column);
    return { tipo: "declaracion", tipoVar: tipo.tipo, nombre: variable, valor, ubicacion: location() };
  };
  var peg$f16 = function(variable, valor) {
      let tipo = getVariable(variable)?.type;
      if (tipo === null) {
        añadirError("Variable " + variable + " no está definida", location());
      }
      setVariable(variable, valor, tipo, location().start.line, location().start.column);
      return { tipo: "asignación", nombre: variable, valor, ubicacion: location() };
    };
  var peg$f17 = function(nombre, valor) {
      let tipo = getVariable(nombre)?.type;
      if (tipo === null) {
        añadirError("Variable " + nombre + " no está definida", location());
      }
      setVariable(nombre, valor, tipo, location().start.line, location().start.column);
      return { tipo: "asignacion", nombre, valor, ubicacion: location() };
    };
  var peg$f18 = function(parametros) {
    return {
      tipo: "funcion",
      nombre: variable,
      parametros,
      contenidoFuncion,
      retorno: variable,
      ubicacion: location()
    };
  };
  var peg$f19 = function() { return { tipo: "int", ubicacion: location() }; };
  var peg$f20 = function() { return { tipo: "float", ubicacion: location() }; };
  var peg$f21 = function() { return { tipo: "string", ubicacion: location() }; };
  var peg$f22 = function() { return { tipo: "char", ubicacion: location() }; };
  var peg$f23 = function() { return { tipo: "bool", ubicacion: location() }; };
  var peg$f24 = function(exp) { return exp; };
  var peg$f25 = function(izq, op, der) {
    return (op == "+" ? izq + der : izq - der);
  };
  var peg$f26 = function(mul) { return mul; };
  var peg$f27 = function(izq, op, der) {
    return (op == "*" ? izq * der : izq / der);
  };
  var peg$f28 = function(der) { return der; };
  var peg$f29 = function(izq, der) {
    return Math.pow(izq, der);
  };
  var peg$f30 = function(unario) { return unario; };
  var peg$f31 = function(valor) {
    return { tipo: "unario", op: "-", valor };
  };
  var peg$f32 = function(expr) { return expr; };
  var peg$f33 = function(expr) { return expr; };
  var peg$f34 = function(expr) { return expr; };
  var peg$f35 = function(expr) { return expr; };
  var peg$f36 = function(expr) { return expr; };
  var peg$f37 = function(expr) { return expr; };
  var peg$f38 = function(cuerpo) { return cuerpo; };
  var peg$f39 = function(cuerpo) { return cuerpo; };
  var peg$f40 = function(cuerpo) { return cuerpo; };
  var peg$f41 = function(variable, campos) { return {tipo: "struct", variable, campos, ubicacion: location()}; };
  var peg$f42 = function(texto) {
      salidaTexto(texto);
      return { tipo: "impresion", valor: texto, ubicacion: location() };
    };
  var peg$f43 = function(contenido) {
      return contenido;
    };
  var peg$f44 = function(partes) {
      let resultado = "";
      partes.forEach(p => {
        if (typeof p === "string") {
          resultado += p;
        } else if (typeof p === "object" && p.tipo === "variable") {
          let val = getVariable(p.nombre);
          if (val !== null) {
            resultado += val;
          } else {
            addError("Variable " + p.nombre + " no definida en interpolación", location());
            resultado += "${" + p.nombre + "}";
          }
        }
      });
      return resultado;
    };
  var peg$f45 = function(t) { return t.join(""); };
  var peg$f46 = function(nombre) {
      return { tipo: "variable", nombre };
    };
  var peg$f47 = function(contenido) { return contenido; };
  var peg$f48 = function(contenido) { return contenido; };
  var peg$f49 = function(contenido) { return contenido; };
  var peg$f50 = function(contenido) { return contenido; };
  var peg$f51 = function(contenido) { return contenido; };
  var peg$f52 = function(tipo1, var1, puntero1, resto) {
    const parametros = [{ tipo: tipo1.tipo, nombre: var1, puntero: !!puntero1 }];
    resto.forEach(([, , t, v, p]) => {
      parametros.push({ tipo: t.tipo, nombre: v, puntero: !!p });
    });
    return parametros;
  };
  var peg$f53 = function(cond, bloque, elsePart) {
    let resultadoCond = cond;

    if (typeof resultadoCond !== "boolean") {
      addError("La condición del if no es booleana", location());
    } else if (resultadoCond === true) {
      bloque.forEach(instr => {
        // podrías ejecutar la instrucción aquí si tienes un motor
        // o solo guardar lo ejecutado
      });
    } else if (elsePart && elsePart.ejecutar === true) {
      // Ejecutar el bloque del else si lo hay
      elsePart.bloque.forEach(instr => {
        // Ejecutar instrucciones del else
      });
    }

    return {
      tipo: "condicional",
      condicion: cond,
      bloqueIf: bloque,
      bloqueElse: elsePart?.bloque ?? [],
      ubicacion: location()
    };
  };
  var peg$f54 = function(cond) {
      return {
        ejecutar: true,
        bloque: cond.bloqueIf,
      };
    };
  var peg$f55 = function(bloque) {
      return {
        ejecutar: true,
        bloque,
      };
    };
  var peg$f56 = function(izq, op, der) {
      switch(op) {
        case ">": return izq > der;
        case "<": return izq < der;
        case ">=": return izq >= der;
        case "<=": return izq <= der;
        case "==": return izq === der;
        case "!=": return izq !== der;
      }
    };
  var peg$f57 = function(izq, op, der) {
      switch(op) {
        case "||": return izq || der;
        case "&&": return izq && der;
      }
    };
  var peg$f58 = function(val) {
      return !val;
    };
  var peg$f59 = function(condicional) { return condicional; };
  var peg$f60 = function(condicional) { return condicional; };
  var peg$f61 = function(condicional) { return condicional; };
  var peg$f62 = function(condicional) { return condicional; };
  var peg$f63 = function(variable, inicio, condicion, cambio, cuerpo) {
    return {
      tipo: "cicloFor",
      variable,
      inicio,
      condicion,
      cambio,
      cuerpo,
      ubicacion: location()
    };
  };
  var peg$f64 = function(n) {
    return parseFloat(n.join(""));
  };
  var peg$f65 = function(txt) {
    return txt.join("");
  };
  var peg$f66 = function(c) {
    return c;
  };
  var peg$f67 = function() { return true; };
  var peg$f68 = function() { return false; };
  var peg$f69 = function(v) { return v; };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseinicio() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parselenguajes();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parselenguajes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseestructuraYAML();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseminiC();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseestructuraYAML() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenombreProyecto();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsemain();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$parsemodulos();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsemodulos();
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f3(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parsenombreProyecto() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomentario();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomentario();
    }
    if (input.substr(peg$currPos, 15) === peg$c0) {
      s2 = peg$c0;
      peg$currPos += 15;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c1;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 34) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parsevariable();
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s8 = peg$c2;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parsecomentario();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parsecomentario();
              }
              peg$savedPos = s0;
              s0 = peg$f4(s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parsemain() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomentario();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomentario();
    }
    if (input.substr(peg$currPos, 4) === peg$c3) {
      s2 = peg$c3;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c1;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 34) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsevariable();
          if (s8 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c4) {
              s9 = peg$c4;
              peg$currPos += 4;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 34) {
                s11 = peg$c2;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s11 !== peg$FAILED) {
                s12 = [];
                s13 = peg$parsecomentario();
                while (s13 !== peg$FAILED) {
                  s12.push(s13);
                  s13 = peg$parsecomentario();
                }
                peg$savedPos = s0;
                s0 = peg$f5(s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsemodulos() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomentario();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomentario();
    }
    if (input.substr(peg$currPos, 6) === peg$c5) {
      s2 = peg$c5;
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenumero();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c1;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s5 = peg$c6;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parselista();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parselista();
            }
            s7 = [];
            s8 = peg$parsecomentario();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsecomentario();
            }
            peg$savedPos = s0;
            s0 = peg$f6(s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parselista() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecomentario();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecomentario();
    }
    if (input.substr(peg$currPos, 7) === peg$c7) {
      s2 = peg$c7;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsenumero();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 34) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsevariable();
            if (s9 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c4) {
                s10 = peg$c4;
                peg$currPos += 4;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s10 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s11 = peg$c2;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s13 = peg$c6;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e12); }
                  }
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s13 = peg$c6;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e12); }
                    }
                  }
                  s13 = [];
                  s14 = peg$parsecomentario();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parsecomentario();
                  }
                  peg$savedPos = s0;
                  s0 = peg$f7(s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parsecomentario() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c8;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r0.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s4 = peg$c6;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseminiC() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemetodoMain();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsecuerpoMiniC();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsecuerpoMiniC();
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parsemetodoMain() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c3) {
        s3 = peg$c3;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c12;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$parsesentencia();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parsesentencia();
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c13;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsesentencia() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracionVariables();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f9(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacionVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f10(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecondicional();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f11(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseimpresionConsola();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f12(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsefunciones();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f13(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsestructs();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f14(s1);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedeclaracionVariables() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetipoVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseexpresion();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c15;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f15(s1, s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseasignacionVariable() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsevariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 59) {
            s7 = peg$c15;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c14;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parsefuncion();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parsefuncion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetipoVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$parseparametros();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseparametros();
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c11;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s11 = peg$c12;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = [];
              s14 = peg$parsecontenidoFuncion();
              while (s14 !== peg$FAILED) {
                s13.push(s14);
                s14 = peg$parsecontenidoFuncion();
              }
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 6) === peg$c16) {
                s15 = peg$c16;
                peg$currPos += 6;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e30); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                s17 = peg$parsevariable();
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s19 = peg$c15;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                  }
                  if (s19 !== peg$FAILED) {
                    s20 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s21 = peg$c13;
                      peg$currPos++;
                    } else {
                      s21 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e24); }
                    }
                    if (s21 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsevariable();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c10;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            s8 = peg$parseparametros();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseparametros();
            }
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c11;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c12;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = [];
                s14 = peg$parsecontenidoFuncion();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parsecontenidoFuncion();
                }
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s15 = peg$c13;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e24); }
                }
                if (s15 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f18(s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parsetipoVariable() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f20();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c19) {
          s1 = peg$c19;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f21();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c20) {
            s1 = peg$c20;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f22();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c21) {
              s1 = peg$c21;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e36); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f23();
            }
            s0 = s1;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseexpresion() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesumaResta();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parsesumaResta() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemultiplicacionDivision();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r1.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsesumaResta();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemultiplicacionDivision();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f26(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsemultiplicacionDivision() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepotencia();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsemultiplicacionDivision();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepotencia();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsemultiplicacionImplicita();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsemultiplicacionImplicita();
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemultiplicacionImplicita() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsepotencia();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f28(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepotencia() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseunario();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 94) {
        s3 = peg$c22;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsepotencia();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseunario();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f30(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseunario() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseunario();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f31(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseprimario();
    }

    return s0;
  }

  function peg$parseprimario() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsesumaResta();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumero();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f33(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsevariable();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f34(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecadena();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f35(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecaracter();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f36(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseboolean();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f37(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecuerpoMiniC() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsestructs();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f38(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseimpresionConsola();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f39(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefunciones();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f40(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parsestructs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c12;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parse_();
          s9 = peg$parsetipoVariable();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parsevariable();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 59) {
                s13 = peg$c15;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e27); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s8 = [s8, s9, s10, s11, s12, s13, s14];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parse_();
            s9 = peg$parsetipoVariable();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parsevariable();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c15;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s8 = [s8, s9, s10, s11, s12, s13, s14];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f41(s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseimpresionConsola() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseinterpolacion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 59) {
              s9 = peg$c15;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f42(s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseinterpolacion() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecontenidoInterpolado();
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontenidoInterpolado() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetextoLiteral();
    if (s2 === peg$FAILED) {
      s2 = peg$parsetextoInterpolado();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetextoLiteral();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetextoInterpolado();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f44(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsetextoLiteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetextoInterpolado() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c26;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c12;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariable();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f46(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunciones() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetipoVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$parseparametros();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseparametros();
          }
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s9 = peg$c11;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s11 = peg$c12;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = [];
              s14 = peg$parsecontenidoFuncion();
              while (s14 !== peg$FAILED) {
                s13.push(s14);
                s14 = peg$parsecontenidoFuncion();
              }
              s14 = peg$parse_();
              if (input.substr(peg$currPos, 6) === peg$c16) {
                s15 = peg$c16;
                peg$currPos += 6;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e30); }
              }
              if (s15 !== peg$FAILED) {
                s16 = peg$parse_();
                s17 = peg$parsevariable();
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s19 = peg$c15;
                    peg$currPos++;
                  } else {
                    s19 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                  }
                  if (s19 !== peg$FAILED) {
                    s20 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s21 = peg$c13;
                      peg$currPos++;
                    } else {
                      s21 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e24); }
                    }
                    if (s21 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsevariable();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c10;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            s8 = peg$parseparametros();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseparametros();
            }
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c11;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s11 = peg$c12;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = [];
                s14 = peg$parsecontenidoFuncion();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parsecontenidoFuncion();
                }
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 125) {
                  s15 = peg$c13;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e24); }
                }
                if (s15 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parsecontenidoFuncion() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedeclaracionStruct();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f47(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseimpresionConsola();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f48(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseasignacionVariable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f49(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsedeclaracionVariables();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f50(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecicloFor();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f51(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parsedeclaracionStruct() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetipoVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 59) {
          s5 = peg$c15;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseparametros() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetipoVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c27;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s9 = peg$c28;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = peg$parsetipoVariable();
          if (s11 !== peg$FAILED) {
            s12 = peg$parse_();
            s13 = peg$parsevariable();
            if (s13 !== peg$FAILED) {
              s14 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 42) {
                s15 = peg$c27;
                peg$currPos++;
              } else {
                s15 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
              if (s15 === peg$FAILED) {
                s15 = null;
              }
              s8 = [s8, s9, s10, s11, s12, s13, s14, s15];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s9 = peg$c28;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parsetipoVariable();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parsevariable();
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 42) {
                  s15 = peg$c27;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e52); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                s8 = [s8, s9, s10, s11, s12, s13, s14, s15];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f52(s1, s3, s5, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parsecondicional() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsecondicion();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s9 = peg$c12;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = [];
              s12 = peg$parsebloqueCondicional();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parsebloqueCondicional();
              }
              s12 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s13 = peg$c13;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e24); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_();
                s15 = peg$parseelseParte();
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f53(s5, s11, s15);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseelseParte() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s2 = peg$c30;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsecondicional();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c30) {
        s2 = peg$c30;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s4 = peg$c12;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = [];
          s7 = peg$parsebloqueCondicional();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsebloqueCondicional();
          }
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s8 = peg$c13;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f55(s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecondicion() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseexpresion();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c31) {
          s3 = peg$c31;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c32) {
            s3 = peg$c32;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e60); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c33) {
              s3 = peg$c33;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e61); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c34) {
                s3 = peg$c34;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e62); }
              }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpresion();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpresion();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c35) {
          s3 = peg$c35;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c36) {
            s3 = peg$c36;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e64); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseexpresion();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f57(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c37;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseexpresion();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f58(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parsebloqueCondicional() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsedeclaracionVariables();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f59(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseasignacionVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f60(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecondicional();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f61(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseimpresionConsola();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f62(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecicloFor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 3) === peg$c17) {
          s5 = peg$c17;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 105) {
            s7 = peg$c39;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s9 = peg$c14;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parsenumero();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 59) {
                  s13 = peg$c15;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parsecondicion();
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s17 = peg$c15;
                      peg$currPos++;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e27); }
                    }
                    if (s17 !== peg$FAILED) {
                      s18 = peg$parse_();
                      if (input.substr(peg$currPos, 3) === peg$c40) {
                        s19 = peg$c40;
                        peg$currPos += 3;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e69); }
                      }
                      if (s19 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c41) {
                          s19 = peg$c41;
                          peg$currPos += 3;
                        } else {
                          s19 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e70); }
                        }
                      }
                      if (s19 !== peg$FAILED) {
                        s20 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s21 = peg$c11;
                          peg$currPos++;
                        } else {
                          s21 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e22); }
                        }
                        if (s21 !== peg$FAILED) {
                          s22 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 123) {
                            s23 = peg$c12;
                            peg$currPos++;
                          } else {
                            s23 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e23); }
                          }
                          if (s23 !== peg$FAILED) {
                            s24 = peg$parse_();
                            s25 = [];
                            s26 = peg$parsebloqueCondicional();
                            while (s26 !== peg$FAILED) {
                              s25.push(s26);
                              s26 = peg$parsebloqueCondicional();
                            }
                            s26 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s27 = peg$c13;
                              peg$currPos++;
                            } else {
                              s27 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e24); }
                            }
                            if (s27 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f63(s7, s11, s15, s19, s25);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }

    return s0;
  }

  function peg$parsenumero() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r5.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r5.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c42;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r5.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = input.charAt(peg$currPos);
            if (peg$r5.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e72); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f64(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

    return s0;
  }

  function peg$parsecadena() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f65(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }

    return s0;
  }

  function peg$parsecaracter() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f66(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f67();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f68();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }

    return s0;
  }

  function peg$parsevariable() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r8.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r9.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r9.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f69(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r10.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e85); }

    return s0;
  }


  memoria.clear();
  salida = "";
  errorSalida = "";

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "inicio"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
